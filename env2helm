#!/usr/bin/env python3
import os
import argparse
from sys import stdout
from ruamel.yaml import YAML


def main(args):
    envs = {}
    for env in os.environ:
        if env.startswith(args.prefix):
            envs[env.replace(args.prefix, '')] = os.environ[env]

    for file in args.files:
        values_file = ValuesFile(file)
        for env in envs:
            try:
                values_file.find_and_replace(env, envs[env])
            except NotFound:
                if args.strict:
                    print("CRITICAL: Couldn't find variable for {}{}".format(args.prefix, env))
                    exit(2)
                else:
                    print("WARNING: Couldn't find variable for {}{}".format(args.prefix, env))
            except FoundDict:
                print("CRITICAL: Found dict under {}{}. Refusing to edit".format(args.prefix, env))
                exit(2)

        if args.in_place:
            values_file.write()
        else:
            values_file.dump()


class ValuesFile():
    def __init__(self, yaml_file):
        self.ruamel_yaml = YAML()
        try:
            self.yaml_file = open(yaml_file, "r+")
        except FileNotFoundError as e:
            print("CRITICAL: Couldn't open file {}: {}".format(yaml_file, e))
            exit(2)

        self.yaml_content = self.ruamel_yaml.load(self.yaml_file)

    def find_and_replace(self, env, value, yaml_content=None):
        if not yaml_content:
            yaml_content = self.yaml_content

        for node in yaml_content:
            for candidate in self._parse_candidates(env):
                if node.lower() == candidate['current'].lower():
                    if candidate['next']:
                        return self.find_and_replace(candidate['next'], value, yaml_content[node])
                    else:
                        if isinstance(yaml_content[node], dict):
                            raise FoundDict
                        yaml_content[node] = value
                        return
        raise NotFound()

    def dump(self):
        self.ruamel_yaml.dump(self.yaml_content, stdout)

    def write(self):
        self.yaml_file.seek(0)
        self.yaml_file.truncate()
        self.ruamel_yaml.dump(self.yaml_content, self.yaml_file)

    def _parse_candidates(self, key, delimiter='_'):
        candidates = []

        for index, candidate in enumerate(key.split(delimiter)):
            elements = key.split(delimiter)
            candidates.append({'key': key,
                               'current': delimiter.join(elements[:index+1]),
                               'next': delimiter.join(elements[index+1:])})

        return candidates

    def __del__(self):
        try:
            self.yaml_file.close()
        except Exception as e:
            pass


class NotFound(Exception):
    pass


class FoundDict(Exception):
    pass


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Map ENV vars to yaml')
    required = parser.add_argument_group('required arguments')
    optional = parser.add_argument_group('optional arguments')
    required.add_argument('-f', '--file', dest='files', action='append', help='Files to process. Can be supplied multiple times.', required=True)
    optional.add_argument('-p', '--prefix', dest='prefix', default='ENV2HELM_', help='Prefix to look for in env variables. Defaults to ENV2HELM_')
    optional.add_argument('-i', '--in-place', dest='in_place', action='store_true', help='Overwrite files instead of printing to stdout. Think sed -i')
    optional.add_argument('-s', '--strict', dest='strict', action='store_true', help='Exit with status code 2 if a prefixed env var did not match any yaml key')
    args = parser.parse_args()
    if args.prefix and not args.prefix.endswith('_'):
        args.prefix += '_'

    main(args)
